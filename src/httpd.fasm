;======================================================;
; Tiny Server.                                         ;
;------------------------------------------------------;
; By Craig Bamford (Dex)                  (11-03-2013) ;
;------------------------------------------------------;
format ELF executable                                  ;
entry start                                            ;
;======================================================;
; Def                                                  ;
;------------------------------------------------------;
SOCK_STREAM       = 1                                  ;
AF_INET           = 2                                  ;
SYS_socketcall    = 102                                ;
SYS_SOCKET        = 1                                  ;
SYS_CONNECT       = 3                                  ;
SYS_SEND          = 9                                  ;
SYS_RECV          = 10                                 ;
IPPROTO_TCP       = 6                                  ;   Transmission Control Protocol
;======================================================;
; old tcpsend macro                                    ;
;------------------------------------------------------;
; r0 = size to send                                    ;
;------------------------------------------------------;
macro tcpsend_reg _msg                                 ;
{ common                                               ;
        stmfd     sp!, {r0-r3,r7\}				   ;
        mov       r2, r0                               ;
        imm32     r0, clientfd                         ;
        ldr       r0, [r0]                             ;
        imm32     r1, _msg                             ;
        mov       r3, 0                                ;
        imm32     r7, 0x121                            ;
        swi       0x0                                  ;
        ldmfd     sp!, {r0-r3,r7\}                    ;
}                                                      ;
include 'FasmArm.inc'                              ;
segment readable writeable executable                  ;
;======================================================;
; Main start                                           ;
;------------------------------------------------------;
start:                                                 ;
        mov       r0, 80                               ; default port number
        rev16     r0, r0                               ; byte order
        imm32     r1, sockaddr_in.sin_port             ;
        strh      r0, [r1]                             ;
;======================================================;
; SOCKET(2)                                            ;
;------------------------------------------------------;
; Creates an endpoint for communication and returns    ;
; a descriptor.                                        ;
;------------------------------------------------------;                                                          ;
        imm32     r7, 0x119                            ; socket sys number
        mov       r0, AF_INET                          ;
        mov       r1, SOCK_STREAM                      ;
        mov       r2, 0                                ;
        swi       0x0                                  ;
        teq       r0, 0                                ;
        bpl       bind                                 ; branch if not neg
                                                       ;
        mvn       r0, r0                               ;
        add       r0, 1                                ; change neg to pos number
        imm32     r1, 4096                             ; We need to check because some times address is neg
        cmp       r0, r1                               ;
;        bl        Convert2Hex                          ; Get error code
        b         fin                                  ; branch exit
align 4                                                ;
;======================================================;
; BIND(2)                                              ;
;------------------------------------------------------;
; When a socket is created with socket(2),             ;
; it exists in a name space (address family) but has   ;
; no address assigned to it. bind() assigns the        ;
; address specified to by addr to the socket referred  ;
; to by the file descriptor sockfd. addrlen specifies  ;
; the size, in bytes, of the address structure pointed ;
; to by addr. Traditionally, this operation is called  ;
; "assigning a name to a socket".                      ;
;------------------------------------------------------;
bind:                                                  ; Ok  SOCKET(2)
        imm32     r1, sockfd                           ;
        str       r0, [r1]                             ;
                                                       ;
        imm32     r0, sockfd                           ; bind(int sockfd, const struct sockaddr *addr,socklen_t addrlen);
        ldr       r0, [r0]                             ;
        imm32     r1, sockaddr_in                      ;
        imm32     r2, dest_size                        ;
        imm32     r7, 0x11A                            ; BIND(2)
        swi       0x0                                  ;
                                                       ;
        teq       r0, 0                                ; check for errors
        bpl       listen                               ; branch if not neg
                                                       ;
        mvn       r0, r0                               ;
        add       r0, 1                                ; change neg to pos number
        imm32     r1, 4096                             ; We need to check because some times address is neg
        cmp       r0, r1                               ;
;        bl        Convert2Hex                          ; Get error code
        b         fin                                  ; branch exit
                                                       ; Ok BIND(2)
;======================================================;
; LISTEN(2)                                            ;
;------------------------------------------------------;
; Start to listen for incomming connections,           ;
; allowing for a queue size of                         ;
; waiting connections of 20.                           ;
;------------------------------------------------------;
align 4                                                ;
listen:                                                ;
        imm32     r0, sockfd                           ; listen(int sockfd, int backlog);
        ldr       r0, [r0]                             ;
        mov       r1, 0                                ; was 20 *****
        imm32     r7, 0x11C                            ; LISTEN(2)
        swi       0x0                                  ;
                                                       ;
        teq       r0, 0                                ; check for errors
        bpl       infinity                             ; branch if not neg
                                                       ;
        mvn       r0, r0                               ;
        add       r0, 1                                ; change neg to pos number
        imm32     r1, 4096                             ; We need to check because some times address is neg
        cmp       r0, r1                               ;
;        bl        Convert2Hex                          ; Get error code
        b         fin                                  ; branch exit
align 4                                                ;
infinity:                                              ; Ok LISTEN(2)
;======================================================;
; ACCEPT(2)                                            ;
;------------------------------------------------------;
; The accept() system call is used with                ;
; connection-based socket types (SOCK_STREAM,          ;
; SOCK_SEQPACKET). It extracts the first connection    ;
; request on the queue of pending connections for the  ;
; listening socket, sockfd, creates a new connected    ;
; socket, and returns a new file descriptor referring  ;
; to that socket. The newly created socket is not in   ;
; the listening state. The original socket sockfd is   ;
; unaffected by this call.                             ;
;------------------------------------------------------;
accept_loop:                                           ;
        imm32     r0, sockfd                           ;
        ldr       r0, [r0]                             ;
        imm32     r1, client_addr_ip                   ; client_addr
        imm32     r2, sixteen                          ; addrlen
        imm32     r7, 0x11D                            ; ACCEPT(2)
        swi       0x0                                  ;
                                                       ;
        teq       r0, 0                                ; check for errors
        bgt       accept_ok                            ;
        b         accept_loop                          ; branch if neg or zero
align 4                                                ;
;======================================================;
; RECV(2)                                              ;
;------------------------------------------------------;
; The recv(2) and recvmsg() calls are used to receive  ;
; messages from a socket, and may be used to receive   ;
; data on a socket whether or not it is                ;
; connection-oriented.                                 ;
;                                                      ;
; If src_addr is not NULL, and the underlying protocol ;
; provides the source address, this source address is  ;
; filled in. When src_addr is NULL, nothing is filled  ;
; in, in this case, addrlen is not used, and should    ;
; also be NULL. The argument addrlen is a value-result ;
; argument, which the caller should initialize before  ;
; the call to the size of the buffer associated with   ;
; src_addr, and modified on return to indicate the     ;
; actual size of the source address. The returned      ;
; address is truncated if the buffer provided is too   ;
; small,                                               ;
; in this case, addrlen will return a value            ;
; greater than was supplied to the call.               ;
;------------------------------------------------------;
accept_ok:                                             ;
        imm32     r1, clientfd                         ;
        str       r0, [r1]                             ;
recv_loop:                                             ;
        imm32     r0, clientfd                         ;
        ldr       r0, [r0]                             ; client FD
        imm32     r1, buffer                           ; buffer
        imm32     r2, bufferlen                        ; buffer size
        imm32     r3, 0                                ; No options
        imm32     r7, 0x123                            ; RECV(2)
        swi       0x0                                  ;
                                                       ;
        teq       r0, 0                                ; check for errors
        blt       recv_loop                            ;
        imm32     r1, recv_size                        ; get size of message
        str       r0, [r1]                             ; store it
;======================================================;
; test for file                                        ;
;------------------------------------------------------;
        imm32     r0, buffer                           ;
        ldr       r2, [r0], 4                          ;
        imm32     r3, 'GET '                           ;
        cmp       r2, r3                               ;
        bne       close                                ;
        eor       r1, r1                               ;
        ldrb      r2, [r0], 1                          ;
        cmp       r2, '/'                              ;
        bne       close                                ;
filewantedloop:                                        ;
        ldrb      r2, [r0], 1                          ;
        cmp       r2, ' '                              ;
        beq       ItsSpace                             ;
                                                       ;
        imm32     r3, bufferwantedfile                 ;
        strb      r2, [r3,r1]                          ;
        add       r1, 1                                ;
        b         filewantedloop                       ;
ItsSpace:                                              ;
        imm32     r3, bufferwantedfile                 ;
        cmp       r1,0                                 ;
        bne       Notjustspace                         ;
        imm32     r6,"inde"                            ;
        str       r6,[r3],4                            ;
        imm32     r6,"x.ht"                            ;
        str       r6,[r3],4                            ;
        imm32     r6,"ml"                               ;
        str       r6,[r3],2                              ;
        imm32     r3, bufferwantedfile                 ;
        mov       r1,10                                 ;
Notjustspace:                                          ;
        mov       r4, 0                                ;
        strb      r4, [r3,r1]                          ;
        imm32     r4, offset                           ;
        str       r1, [r4]                             ;
;======================================================;
; get file info                                        ;
;------------------------------------------------------;
fileisnamed:                                           ;
        mov       r7, 106                              ;
        imm32     r0, bufferwantedfile                 ;
        imm32     r1, stat                             ;
        swi       0x0                                  ;
        cmp       r0, 0                                ;
        beq       openfile                             ;
                                                       ;
;======================================================;
; file not found                                       ;
;------------------------------------------------------;
		imm32     r0, h404.len                         ;
        tcpsend_reg   h404                        ;
        b         close                                ;
                                                       ;
;======================================================;
; Try to open file                                     ;
;------------------------------------------------------;
openfile:                                              ;
        imm32     r4, stat                             ;
        ldr       r0, [r4,20]                          ;
        imm32     r5, fdlen                            ;
        str       r0, [r5]                             ;
        mov       r7, 5                                ;
        imm32     r0, bufferwantedfile                 ;
        mov       r1 ,0                                ;
        mov       r2 ,0                                ;
        swi       0x0                                  ;
        teq       r0, 0                                ; check for errors
        bgt       fd_ok                                ;
;======================================================;
; Error when opeing file                               ;
;------------------------------------------------------;
        mvn       r0, r0                               ;
        add       r0, 1                                ; change neg to pos number
;        bl        Convert2Hex                          ;
        b         close                                ;
;======================================================;
; file found and ready to send                         ;
;------------------------------------------------------;
fd_ok:                                                 ;
        imm32     r1, fd                               ;
        str       r0, [r1]                             ;
;======================================================;
; set header (eg: file size)                           ;
;------------------------------------------------------;
        imm32     r0, fdlen                            ;
        ldr       r0, [r0]                             ;
        imm32     r0, h200.len                         ;
        add       r0, r10                              ;
;======================================================;
; send header                                          ;
;------------------------------------------------------;
        tcpsend_reg h200                               ;
;======================================================;
; Send file                                            ;
;------------------------------------------------------;
        mov       r7, 187                              ;
        imm32     r0, clientfd                         ;
        ldr       r0, [r0]                             ;
        imm32     r1, fd                               ;
        ldr       r1, [r1]                             ;
        mov       r2, 0                                ;
        imm32     r3, fdlen                            ;
        ldr       r3, [r3]                             ;
        mov       r4, 0                                ;
        swi       0x0                                  ;
                                                       ;
align 4                                                ;
;======================================================;
; Close socket and wait                                ;
;------------------------------------------------------;
close:                                                 ;
        mov       r7, 6                                ;
        imm32     r0, fd                               ;
        ldr       r0, [r0]                             ;
        swi       0x0                                  ;
        mov       r7, 6                                ; CLOSE(2)
        imm32     r0, clientfd                         ;
        ldr       r0, [r0]                             ;
        swi       0x0                                  ;
        imm32     r0,buffer                            ;
        eor       r1,r1                                ;
        imm32     r2,bufferlen                         ;
        mov       r2,r2, lsr 2                         ;
align 4                                                ;
ClearBuffLoop:                                         ;
        str       r1,[r0],4                            ;
        subs      r2,r2,1                              ;
        bne       ClearBuffLoop                        ;
        b         infinity                             ;
align 4                                                ;
;======================================================;
; Close server and exit                                ;
;------------------------------------------------------;
fin:                                                   ; exit
        mov       r0, 0x0                              ;
        mov       r7, 0x1                              ;
        swi       0x0                                  ;
                                                       ;
;======================================================;
; data                                                 ;
;------------------------------------------------------;
segment readable writeable                             ;
align 4                                                ;
client_addr_ip: rb 16                                  ;
sixteen dw 16                                          ;
align 4                                                ;
sockaddr_in:                                           ;
  .sin_family dh AF_INET                               ;
  .sin_port   dh 0                                     ;
  .sin_addr   dw 0                                     ;
  .sin_zero   rb 8                                     ;
dest_size = $-sockaddr_in                              ;
align 4                                                ;
client_addr   dw sockaddr_in                           ;
addrlen       dw dest_size                             ;
align 4                                                ;
recv_size     dw 0                                     ;
sockfd        dw 0                                     ;
fd            dw 0                                     ;
fdlen         dw 0                                     ;
clientfd      dw 0                                     ;
offset        dw 0                                     ;
align 4                                                ;
h404 db 'HTTP/1.0 404 Not Found',13,10,13,10		   ;
.len = $ - h404                                        ;
align 4                                                ;
h200 db  'HTTP/1.0 200 OK',13,10,13,10                 ;
.len = $ - h200                                        ;
align 4                                                ;
stat  rb 88                                            ;
align 4                                                ;
buffer  rb 512                                         ;
bufferlen = $ - buffer                                 ;
align 4                                                ;
bufferwantedfile  rb 512                               ;
align 4                                                ;                                        
